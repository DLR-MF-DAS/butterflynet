"""
This code is generated by Ridvan Salih KUZU @DLR
LAST EDITED:  01.06.2021
ABOUT SCRIPT:
It contains some custom metric functions exploited for experimental purposes in this project.
"""

import tensorflow as tf
from tensorflow.keras import backend as K
from tensorflow.keras.layers import Lambda



def pearson_r(y_true, y_pred):
    '''
    THIS FUNCTION IS EXPERIMENTAL.
    THIS FUNCTION CALCULATES THE PEARSON CORRELATION BETWEEN PREDICTED AND GROUND-TRUTH LABELS.
    :param y_true: ground-truth labels
    :param y_pred: predicted lables
    :return: returns the metrics value
    '''
    x = y_true
    y = y_pred
    mx = K.mean(x, axis=0)
    my = K.mean(y, axis=0)
    xm, ym = x - mx, y - my
    r_num = K.sum(xm * ym)
    x_square_sum = K.sum(xm * xm)
    y_square_sum = K.sum(ym * ym)
    r_den = K.sqrt(x_square_sum * y_square_sum)
    r = r_num / r_den
    return K.mean(r)



def self_supervised_binary_accuracy(name='accuracy'):
    '''
    THIS FUNCTION IS EXPERIMENTAL.
    THIS FUNCTION CALCULATES SELF-SUPERVISED BINARY ACCURACY BETWEEN PREDICTED AND GROUND-TRUTH LABELS.
    '''
    binary_acc = tf.keras.metrics.BinaryAccuracy()
    def func(y_true,y_pred):
        '''
        THIS FUNCTION IS EXPERIMENTAL.
        THIS FUNCTION CALCULATES THE PEARSON CORRELATION BETWEEN PREDICTED AND GROUND-TRUTH LABELS.
        :param y_true: ground-truth labels
        :param y_pred: predicted labels
        :return: returns the metrics value
        '''
        out_a, out_b = tf.split(y_pred, 2, -1)
        out = tf.math.subtract(out_a, out_b, name=None)
        out = Lambda(lambda out: tf.norm(out, ord='euclidean', keepdims=True, axis=-1))(out)
        #out = -K.mean(out_a * out_b, axis=-1, keepdims=True)
        prediction = tf.keras.activations.sigmoid(out)
        #tf.print(prediction)
        return binary_acc(y_true, prediction)

    func.__name__ = '{}'.format(name)
    return func

def mean_iou():
    '''
    THIS FUNCTION CALCULATES MEAN INTERSECTION OVER UNION METRICS BETWEEN PREDICTED AND GROUND-TRUTH LABELS.
    '''
    def iou(y_true,y_pred):
        '''
        THIS FUNCTION CALCULATES MEAN INTERSECTION OVER UNION METRICS BETWEEN PREDICTED AND GROUND-TRUTH LABELS.
        :param y_true: ground-truth labels
        :param y_pred: predicted labels
        :return: returns the metrics value
        '''
        #tf.print(tf.math.reduce_max(y_true))
        #tf.print(tf.math.reduce_min(y_true))
        y_pred = tf.cast(tf.cast(y_pred + 0.5, tf.int32),tf.float32)
        intersection = K.sum(y_true * y_pred)
        # calculate the |union| (OR) of the labels
        union = K.sum(y_true) + K.sum(y_pred) - intersection
        # avoid divide by zero - if the union is zero, return 1
        # otherwise, return the intersection over union
        return K.switch(K.equal(union, 0), 1.0, intersection / union)

        #intersection = tf.reduce_sum(tf.math.multiply(y_true,y_pred),axis=[1,2,3])
        #union = tf.reduce_sum(tf.math.add(y_true, y_pred),axis=[1,2,3])
        #print(intersection)
        #print(union)
        #return intersection/union
    return iou



